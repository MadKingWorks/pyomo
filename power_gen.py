#! /usr/bin/env python3
# vim:fenc=utf-8
#
# Copyright Â© 2024 rahul <rahul@MadkIngWorks>
#
# Distributed under terms of the MIT license.

"""
optimal power gen using pyomo and pandas
"""

import pyomo.environ as pyo
from pyomo.opt import SolverFactory
import pandas as pd

data_gen = pd.read_csv("inputs.csv")
data_loads = pd.read_csv("loads.csv")

number_generators = len(data_gen)

model = pyo.ConcreteModel()
# define power generationi ; this is a variable , solver will find values for it.
model.pg = pyo.Var(range(number_generators), bounds=(0, None))
pg = model.pg

# constraints
pg_sum = sum([pg[g] for g in data_gen.ID])
print(data_loads.LoadDemand)
print(data_gen.columns)
# power generation must be equal to loads
model.balance = pyo.Constraint(expr=pg_sum == sum(data_loads.LoadDemand))

# load 0 must be fed by first and fourth genset
model.cond = pyo.Constraint(expr=pg[0] + pg[3] >= data_loads.LoadDemand[0])

model.limits = pyo.ConstraintList()

for g in data_gen.ID:
    # power generated by each genset must be less than rated capacity
    model.limits.add(expr=pg[g] <= data_gen.PowerGenerationLimit[g])

cost_sum = sum([pg[g] * data_gen.Cost[g] for g in data_gen.ID])
model.obj = pyo.Objective(expr=cost_sum)

opt = SolverFactory("glpk")
results = opt.solve(model)
print(results)
data_gen["pg"] = [pyo.value(pg[g]) for g in data_gen.ID]
print(data_gen.head(5))
